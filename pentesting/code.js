Java.perform(function () {
    let PainterResource = Java.use(
        "androidx.compose.ui.res.PainterResources_androidKt"
    );
    PainterResource["painterResource"].implementation = function (id, $composer, $changed) {
        console.log(
            `[*] Hooked Function Painter with: id=${id}`
        );
        let hedgehogId = 2131165284;
        let result = this["painterResource"](hedgehogId, $composer, $changed);
        console.log(
            `[*] Result  result=${result}`
        );
        return result;
    };


    /*
let NavGraphBuilderKt = Java.use("androidx.navigation.compose.NavGraphBuilderKt");
NavGraphBuilderKt["composable$default"].overload('androidx.navigation.NavGraphBuilder', 'java.lang.String', 'java.util.List', 'java.util.List', 'kotlin.jvm.functions.Function1', 'kotlin.jvm.functions.Function1', 'kotlin.jvm.functions.Function1', 'kotlin.jvm.functions.Function1', 'kotlin.jvm.functions.Function4', 'int', 'java.lang.Object').implementation = function (navGraphBuilder, str, list, list2, function1, function12, function13, function14, body, i, obj) {
    let ComposableSingletons$HomeNavGraph_ktKt = Java.use("com.bassmd.myenchantedgarden.graphs.ComposableSingletons$HomeNavGraph_ktKt");
    console.log(`NavGraphBuilderKt.composable$default is called: navGraphBuilder=${navGraphBuilder}, str=${str}, list=${list}, list2=${list2}, function1=${function1}, function12=${function12}, function13=${function13}, function14=${function14}, body=${body}, i=${i}, obj=${obj}`);
    if (str == "STORE" || str == "PROFILE") {
        let INSTANCE = ComposableSingletons$HomeNavGraph_ktKt.INSTANCE.value;
        let a = INSTANCE["getLambda-1$app_debug"]()
        this["composable$default"](navGraphBuilder, str, list, list2, function1, function12, function13, function14, a , i, obj);
    }
    else {
     this["composable$default"](navGraphBuilder, str, list, list2, function1, function12, function13, function14, body, i, obj);
    }
};*/
    /*
let ComposableSingletons$HomeNavGraph_ktKt = Java.use("com.bassmd.myenchantedgarden.graphs.ComposableSingletons$HomeNavGraph_ktKt");
ComposableSingletons$HomeNavGraph_ktKt["getLambda-2$app_debug"].implementation = function () {
    console.log(`ComposableSingletons$HomeNavGraph_ktKt.m5703getLambda2$app_debug is called`);
    let result = this["getLambda-1$app_debug"]();
    console.log(`ComposableSingletons$HomeNavGraph_ktKt.m5703getLambda2$app_debug result=${result}`);
    return result;
};*/

    let AppViewModel = Java.use(
        "com.bassmd.myenchantedgarden.viewModel.app.AppViewModel"
    );



    // Play request
    let UserRepositoryImpl = Java.use(
        "com.bassmd.myenchantedgarden.repo.UserRepositoryImpl"
    );
    UserRepositoryImpl["playGame-gIAlu-s"].implementation = function (
        playRequest,
        continuation
    ) {
        console.log(
            `UserRepositoryImpl.mo5748playGamegIAlus is called: playRequest=${playRequest}, continuation=${continuation}`
        );
        // Always win
        if (playRequest != null) {
            playRequest.copy(true);
        }
        let result = this["playGame-gIAlu-s"](playRequest, continuation);
        console.log(`UserRepositoryImpl.mo5748playGamegIAlus result=${result}`);
        return result;
    };

    // Avoid lose
    let PlantsViewModel = Java.use(
        "com.bassmd.myenchantedgarden.viewModel.plants.PlantsViewModel"
    );
    PlantsViewModel["play"].implementation = function (won, continuation) {
        let PlantsScreen =
            "com.bassmd.myenchantedgarden.ui.home.PlantsScreenKt$PlantsScreen$6$1$1$2$1";
        console.log(
            `PlantsViewModel.play is called: won=${won}, continuation=${continuation}`
        );
        if (!won && continuation.$className == PlantsScreen) {
            let Boxing = Java.use("kotlin.coroutines.jvm.internal.Boxing");
            AppViewModel.showError$default(
                this,
                "[*] We can't lose",
                null,
                2,
                null
            );
            return Boxing.boxBoolean(true);
        }
        let result = this["play"](won, continuation);
        console.log(`PlantsViewModel.play result=${result}`);
        return result;
    };

    // Modify message
    let AppError = Java.use("com.bassmd.myenchantedgarden.dto.AppError");
    AppError["$init"].overload(
        "java.lang.String",
        "androidx.compose.material3.SnackbarDuration",
        "boolean"
    ).implementation = function (message, duration, showError) {
        console.log(
            `AppError.$init is called: message=${message}, duration=${duration}, showError=${showError}`
        );
        if (message.includes("a game")) {
            this["$init"]("We always win", duration, showError);
        } else {
            this["$init"](message, duration, showError);
        }
    };

    // View all store
    let StoreModel = Java.use(
        "com.bassmd.myenchantedgarden.repo.dto.StoreModel"
    );
    StoreModel["$init"].overload(
        "int",
        "int",
        "int",
        "java.lang.String",
        "java.lang.String",
        "java.lang.String",
        "boolean",
        "kotlinx.serialization.internal.SerializationConstructorMarker"
    ).implementation = function (
        seen1,
        id,
        cost,
        name,
        description,
        plantFile,
        isAvailable,
        serializationConstructorMarker
    ) {
        this["$init"](
            seen1,
            id,
            cost,
            name,
            description,
            plantFile,
            true,
            serializationConstructorMarker
        );
    };

    // View all items
    let PlantsModel = Java.use("com.bassmd.myenchantedgarden.dto.PlantsModel");
    PlantsModel["$init"].overload(
        "int",
        "int",
        "java.lang.String",
        "java.lang.String",
        "int",
        "java.lang.String",
        "boolean",
        "kotlinx.datetime.Instant",
        "kotlinx.serialization.internal.SerializationConstructorMarker"
    ).implementation = function (
        seen1,
        id,
        name,
        description,
        coinsToCollect,
        filePath,
        isUnlocked,
        nextCollectTime,
        serializationConstructorMarker
    ) {
        this["$init"](
            seen1,
            id,
            name,
            description,
            coinsToCollect,
            filePath,
            true,
            nextCollectTime,
            serializationConstructorMarker
        );
    };

    // Achievements
    let AchievementsModel = Java.use(
        "com.bassmd.myenchantedgarden.dto.AchievementsModel"
    );
    AchievementsModel["$init"].overload(
        "int",
        "java.lang.String",
        "int",
        "java.lang.String",
        "java.lang.String",
        "boolean",
        "int",
        "kotlinx.serialization.internal.SerializationConstructorMarker"
    ).implementation = function (
        seen1,
        name,
        coins,
        description,
        filePath,
        isUnlocked,
        plantsId,
        serializationConstructorMarker
    ) {
        this["$init"](
            seen1,
            name,
            coins,
            description,
            filePath,
            true,
            plantsId,
            serializationConstructorMarker
        );
    };

    let DefaultImpls = Java.use("io.ktor.http.Headers$DefaultImpls");
    let HttpRequestData = Java.use("io.ktor.client.request.HttpRequestData");
    HttpRequestData["$init"].implementation = function (
        url,
        method,
        headers,
        body,
        executionContext,
        attributes
    ) {
        console.log("\n----------------  Request:  ---------------");
        console.log(`url=${url}, method=${method}`);
        if (body != "EmptyContent") {
            console.log("Body:\n");
            console.log(body);
            console.log("");
        }
        console.log(DefaultImpls.get(headers, "Cookie"));
        console.log("-------------------------------\n");
        this["$init"](url, method, headers, body, executionContext, attributes);
    };
});
