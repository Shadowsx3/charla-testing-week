console.log("Script loaded successfully");
let repository;
let appCodes;
Java.deoptimizeEverything()

Java.perform(function () {
    Java.choose("com.bassmd.myenchantedgarden.repo.UserRepositoryImpl", {
        onMatch: function (instance) {
            console.log("Found repository instance");
            repository = instance;
        },
        onComplete: function () {
        }
    });
});

function setPremium() {
    Java.perform(function () {
        // Update all new instances
        let UserModel = Java.use("com.bassmd.myenchantedgarden.repo.dto.UserModel");
        UserModel["$init"].overload(
            "int", "java.lang.String", "java.lang.String", "boolean", "java.lang.String", "int", "int", "int", "int", "kotlinx.datetime.Instant", "kotlinx.serialization.internal.SerializationConstructorMarker"
        ).implementation = function (
            seen1, email, name, isPremium, role, energy, coins, wins, losses, nextClaimEnergyTime, serializationConstructorMarker
        ) {
            this["$init"](seen1, email, name, true, role, energy, coins, wins, losses, nextClaimEnergyTime, serializationConstructorMarker
            );
        };

        /*Update actual instance*/
        let user = repository.userData.value.getValue();
        let targetClass = Java.use('com.bassmd.myenchantedgarden.repo.dto.UserModel');
        let userData = Java.cast(user, targetClass);
        console.log("Class of user: " + userData.$className);//.getDeclaredFields .getDeclaredMethods getClass()
        console.log("Field of isPremium: " + userData._isPremium);
        userData._isPremium.value = true;
        console.log("New field of isPremium: " + userData._isPremium);
    });
}

function unlockAllA() {
    Java.perform(function () {
        let AchievementsCodes = Java.use("com.bassmd.myenchantedgarden.repo.dto.AchievementsCodes");
        let fields = AchievementsCodes.class.getDeclaredFields();
        console.log("AchievementsCodes fields and codes: ");//.getDeclaredFields .getDeclaredMethods getClass()
        let codes = [];
        for (let f of fields) {
            if (f.toString().includes("java.lang.String")) {
                let field = f.toString().split(".").slice(-1)
                console.log("\t" + field + " -> " + AchievementsCodes[field].value)
                codes.push(AchievementsCodes[field].value)
            }
        }
        appCodes = codes;

        let AppViewModel = Java.use("com.bassmd.myenchantedgarden.viewModel.app.AppViewModel");
        AppViewModel["unlock"].implementation = function (it, continuation) {
            console.log(`AppViewModel.unlock is called: it=${it}, continuation=${continuation}`);
            if (it != null && appCodes.length > 0) {
                it = appCodes.pop()
                console.log(`Replaced by: ${it}`)
            }
            let result = this["unlock"](it, continuation);
            console.log(`AppViewModel.unlock result=${result}`);
            return result;
        };
    });
}

function stealCredentials() {
    let LoginRequest = Java.use("com.bassmd.myenchantedgarden.dto.LoginRequest");
    LoginRequest["$init"].overload('java.lang.String', 'java.lang.String').implementation = function (email, password) {
        console.log(`LoginRequest.$init is called: email=${email}, password=${password}`);
        this["$init"](email, password);
    };
}

function showMessage(message) {
    let AppViewModel = Java.use(
        "com.bassmd.myenchantedgarden.viewModel.app.AppViewModel"
    );
    Java.choose("com.bassmd.myenchantedgarden.viewModel.plants.PlantsViewModel", {
        onMatch: function (instance) {
            console.log("Found plants instance");
            AppViewModel.showError$default(
                instance,
                message,
                null,
                2,
                null
            );
        },
        onComplete: function () {
        }
    });
}

function alwaysWin() {
    let LiveLiterals$PlantsScreenKt = Java.use("com.bassmd.myenchantedgarden.ui.home.LiveLiterals$PlantsScreenKt");
    let loseText = LiveLiterals$PlantsScreenKt["_String$arg-0$call-Text$fun-$anonymous$$arg-9$call-Button$fun-$anonymous$$arg-3$call-Row$fun-$anonymous$$arg-3$call-Column$fun-$anonymous$$arg-5$call-Card$fun-$anonymous$$arg-2$call-Dialog$fun-PlayDialog"];
    loseText.value = "WinWin"

    let PlayRequest = Java.use("com.bassmd.myenchantedgarden.dto.PlayRequest");
    PlayRequest["$init"].overload('boolean').implementation = function (won) {
        console.log(`PlayRequest.$init is called: won=${won} -> won=true`);
        this["$init"](true);
    };

    /*Hard
    let PlantsViewModel = Java.use(
        "com.bassmd.myenchantedgarden.viewModel.plants.PlantsViewModel"
    );
    PlantsViewModel["play"].implementation = function (won, continuation) {
        let PlantsScreen =
            "com.bassmd.myenchantedgarden.ui.home.PlantsScreenKt$PlantsScreen$6$1$1$2$1";
        console.log(
            `PlantsViewModel.play is called: won=${won}, continuation=${continuation}`
        );
        if (!won && continuation.$className == PlantsScreen) {
            let Boxing = Java.use("kotlin.coroutines.jvm.internal.Boxing");
            return Boxing.boxBoolean(true);
        }
        let result = this["play"](won, continuation);
        console.log(`PlantsViewModel.play result=${result}`);
        return result;
    };*/
    console.log("[*] Hacked")
}

function showMessage(message) {
    let AppViewModel = Java.use(
        "com.bassmd.myenchantedgarden.viewModel.app.AppViewModel"
    );
    Java.choose("com.bassmd.myenchantedgarden.viewModel.plants.PlantsViewModel", {
        onMatch: function (instance) {
            console.log("Found plants instance");
            AppViewModel.showError$default(
                instance,
                message,
                null,
                2,
                null
            );
        },
        onComplete: function () {
        }
    });
}

function hedgehogs() {
    let PainterResource = Java.use(
        "androidx.compose.ui.res.PainterResources_androidKt"
    );
    PainterResource["painterResource"].implementation = function (id, $composer, $changed) {
        let hedgehogId = 2131165284;
        return this["painterResource"](hedgehogId, $composer, $changed);
    };
}

rpc.exports = {
    setpremium: setPremium,
    unlockalla: unlockAllA,
    stealcredentials: stealCredentials,
    showmessage: showMessage,
    alwayswin: alwaysWin,
    hedgehogs: hedgehogs
};